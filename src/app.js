// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var ListView, Task, TaskCollection, TaskView, list_view;
    Task = (function(superClass) {
      extend(Task, superClass);

      function Task() {
        return Task.__super__.constructor.apply(this, arguments);
      }

      Task.prototype.defaults = function() {
        return {
          text: "",
          completed: "No"
        };
      };

      return Task;

    })(Backbone.Model);
    TaskCollection = (function(superClass) {
      extend(TaskCollection, superClass);

      function TaskCollection() {
        return TaskCollection.__super__.constructor.apply(this, arguments);
      }

      TaskCollection.prototype.model = Task;

      return TaskCollection;

    })(Backbone.Collection);
    TaskView = (function(superClass) {
      extend(TaskView, superClass);

      function TaskView() {
        this.unrender = bind(this.unrender, this);
        this.render = bind(this.render, this);
        return TaskView.__super__.constructor.apply(this, arguments);
      }

      TaskView.prototype.tagName = "li";

      TaskView.prototype.initialize = function() {
        this.model.bind("change", this.render);
        return this.model.bind("remove", this.unrender);
      };

      TaskView.prototype.render = function() {
        $(this.el).html("<span>" + (this.model.get('text')) + ". Complete? " + (this.model.get('completed')) + ".</span>\n<span class=\"check\">Check</span>\n<span class=\"delete\">Delete</span>");
        return this;
      };

      TaskView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      TaskView.prototype.check = function() {
        if ((this.model.get('completed')) === "No") {
          return this.model.set({
            completed: "Yes"
          });
        } else {
          return this.model.set({
            completed: "No"
          });
        }
      };

      TaskView.prototype.remove = function() {
        return this.model.destroy();
      };

      TaskView.prototype.events = {
        "click .check": "check",
        "click .delete": "remove"
      };

      return TaskView;

    })(Backbone.View);
    ListView = (function(superClass) {
      extend(ListView, superClass);

      function ListView() {
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.el = $("body");

      ListView.prototype.initialize = function() {
        this.collection = new TaskCollection;
        this.collection.bind("add", this.appendItem);
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        $(this.el).append("<button>Add List Item</button>");
        return $(this.el).append("<ol></ol>");
      };

      ListView.prototype.addItem = function() {
        var task;
        this.counter++;
        task = new Task;
        task.set({
          text: "Hi " + this.counter
        });
        return this.collection.add(task);
      };

      ListView.prototype.appendItem = function(task) {
        var task_view;
        task_view = new TaskView({
          model: task
        });
        return $("ol").append(task_view.render().el);
      };

      ListView.prototype.events = {
        "click button": "addItem"
      };

      return ListView;

    })(Backbone.View);
    Backbone.sync = function(method, model, success, error) {
      return success();
    };
    return list_view = new ListView;
  });

}).call(this);
